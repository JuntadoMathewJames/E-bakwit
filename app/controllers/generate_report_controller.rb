class GenerateReportController < ApplicationController
    
    def generate ## evac_centers/1/:disaster/generate
        @evac_center = EvacCenter.find(params[:evac_center])
        @disaster = Disaster.find(params[:disaster_id])
        reliefGoods = ReliefGood.where("evac_center = ? AND disaster = ?").all

        @tprice = 0
        rlGoods = []
        essFaci = []
        @yProf = EvacYearlyProfile.all.where(evac_id: @evac_center.id).where(year: @disaster.year).each do |yp|
            AssignedYearlyEss.all.where(evac_profile_id: yp.id).each do |ye|
                essFaci.push([EvacuationEssential.find(ye.ess_id).name,EvacuationEssential.find(ye.ess_id).ess_type, EvacuationEssential.find(ye.ess_id).description, ye.quantity, ye.status])
            end
        end
        GenRgAlloc.all.where("disaster_id = ? AND evac_id = ?", @disaster.id , @evac_center.id).each do |rg|               
            rlGoods.push([rg.name, "#{ReliefGood.find(rg.rg_id).unit } / #{ReliefGood.find(rg.rg_id).price }" , rg.price / ReliefGood.find(rg.rg_id).price, rg.price])  
            if ReliefGood.find(rg.rg_id).is_food == true
                @tprice = @tprice + rg.price 
            elsif ReliefGood.find(rg.rg_id).is_food == false
                @tprice = @tprice + rg.price 
            else
                @tprice = @tprice + rg.price
            end
        end
        result = CSV.generate(encoding: "utf-8") do |csv|
            ## EVACUEE
            csv << ["Report Number"]
            csv << ["GENERATED AS OF", Time.current, "GENERATED BY", User.find(session[:user_id]).full_name, "EMAIL", User.find(session[:user_id]).email, "MOBILE No.", User.find(session[:user_id]).cnum]
            csv << ["INCIDENT NAME", @disaster.name, "DISASTER TYPE",@disaster.disaster_type,"DATE OF OCCURENCE", @disaster.date_of_occurence]
            csv << ["EVACUATION CENTER", @evac_center.name, "ADDRESS","#{@evac_center.barangay}, Naga City, Camarines Sur"]
            #
            csv << ["NOTED BY"]
            csv << []
            #
            csv << ["Age Range", "No. Of MALEs", "No. Of FEMALEs", "TOTAL"]
            csv << ["INFANT", helpers.getInfants(@evac_center.id, @disaster.id,"Male"),helpers.getInfants(@evac_center.id, @disaster.id,"Female"),helpers.getInfants(@evac_center.id, @disaster.id,"Male") + helpers.getInfants(@evac_center.id, @disaster.id,"Female")]
            csv << ["TODDLER", helpers.getToddlers(@evac_center.id, @disaster.id,"Male"), helpers.getToddlers(@evac_center.id, @disaster.id,"Female"),helpers.getToddlers(@evac_center.id, @disaster.id,"Male") + helpers.getToddlers(@evac_center.id, @disaster.id,"Female")]
            csv << ["PRESCHOOLERS",helpers.getPreschoolers(@evac_center.id, @disaster.id,"Male"),helpers.getPreschoolers(@evac_center.id, @disaster.id,"Female"),helpers.getPreschoolers(@evac_center.id, @disaster.id,"Male") + helpers.getPreschoolers(@evac_center.id, @disaster.id,"Female")]
            csv << ["SCHOOLAGERS",helpers.getSchoolagers(@evac_center.id, @disaster.id,"Male"),helpers.getSchoolagers(@evac_center.id, @disaster.id,"Female"),helpers.getSchoolagers(@evac_center.id, @disaster.id,"Male") + helpers.getSchoolagers(@evac_center.id, @disaster.id,"Female")]
            csv << ["TEENAGERS",helpers.getTeenagers(@evac_center.id, @disaster.id,"Male"),helpers.getTeenagers(@evac_center.id, @disaster.id,"Female"),helpers.getTeenagers(@evac_center.id, @disaster.id,"Male") + helpers.getTeenagers(@evac_center.id, @disaster.id,"Female")]
            csv << ["ADULTS",helpers.getAdults(@evac_center.id, @disaster.id,"Male"),helpers.getAdults(@evac_center.id, @disaster.id,"Female"),helpers.getAdults(@evac_center.id, @disaster.id,"Male") + helpers.getAdults(@evac_center.id, @disaster.id,"Female")]
            csv << ["SENIORS",helpers.getSeniors(@evac_center.id, @disaster.id,"Male"),helpers.getSeniors(@evac_center.id, @disaster.id,"Female"),helpers.getSeniors(@evac_center.id, @disaster.id,"Male") + helpers.getSeniors(@evac_center.id, @disaster.id,"Female")]
            csv << ["TOTAL",helpers.countGenderEvacuated(@evac_center.id,@disaster, "Male"),helpers.countGenderEvacuated(@evac_center.id,@disaster, "Female"),helpers.countGenderEvacuated(@evac_center.id,@disaster, "Male") + helpers.countGenderEvacuated(@evac_center.id,@disaster, "Female")]
            ##RELIEF
            csv << [""]
            csv << [""]
            csv << ["RELIEF GOODS RECIEVED"]
            csv << [""]
            csv << ["NAME", "UNIT / PRICE", "QUANTITY", "CUMULATIVE PRICE"]
            rlGoods.each do |rlG|
                csv << rlG
            end
            csv << [""]
            csv << [""]
            csv << ["EVACUATION CENTER FACILITIES"]
            csv << [""]
            csv << ["NAME", "TYPE", "DESCRIPTION", "QUANTITY", "QUALITY"]
            essFaci.each do |rlG|
                csv << rlG
            end
        end
        respond_to do |format|
            format.html
            format.xls {send_data result, filename: "#{@disaster.name}-#{@disaster.date_of_occurence}-#{@evac_center.name}.xls", type: 'text/xls' }
            format.csv {send_data result, filename: "#{@disaster.name}-#{@disaster.date_of_occurence}-#{@evac_center.name}.csv", type: 'text/csv' }
        end
    end
    def generate_all # disasters/1/generate
        ## GRAND TOTAL OF ALL EVAC CENTERS
        @totalfamily = 0
        @totalPersons = 0
        @CumFamilies = 0
        @NowFamilies = 0
        @CumPerson = 0
        @NowPerson = 0
        # DEMOGRAPHICS
        @infantM = 0
        @toddlerM = 0
        @preschoolersM = 0
        @schoolageM = 0
        @teenageM = 0
        @adultM = 0
        @seniorM = 0

        @infantF = 0
        @toddlerF = 0
        @preschoolersF = 0
        @schoolageF = 0
        @teenageF = 0
        @adultF = 0
        @seniorF = 0

        ## RELIEF GOODS PART
        @tprice = 0
        rlGoods = []
        essFaciTitles = [""]
        @disaster = Disaster.find(params[:disaster_id])
        @evac_centers = EvacCenter.all
        @evac_centers.each do |center|
            @infantM = @infantM + helpers.getInfants(center.id, @disaster.id, "Male")
            @toddlerM = @toddlerM + helpers.getToddlers(center.id, @disaster.id, "Male")
            @preschoolersM = @preschoolersM + helpers.getPreschoolers(center.id, @disaster.id, "Male")
            @schoolageM = @schoolageM + helpers.getSchoolagers(center.id, @disaster.id, "Male")
            @teenageM = @teenageM + helpers.getTeenagers(center.id, @disaster.id, "Male")
            @adultM = @adultM + helpers.getAdults(center.id, @disaster.id, "Male")
            @seniorM = @seniorM + helpers.getSeniors(center.id, @disaster.id, "Male")

            @infantF = @infantF + helpers.getInfants(center.id, @disaster.id, "Female")
            @toddlerF = @toddlerF + helpers.getToddlers(center.id, @disaster.id, "Female")
            @preschoolersF = @preschoolersF + helpers.getPreschoolers(center.id, @disaster.id, "Female")
            @schoolageF = @schoolageF + helpers.getSchoolagers(center.id, @disaster.id, "Female")
            @teenageF = @teenageF + helpers.getTeenagers(center.id, @disaster.id, "Female")
            @adultF = @adultF + helpers.getAdults(center.id, @disaster.id, "Female")
            @seniorF = @seniorF + helpers.getSeniors(center.id, @disaster.id, "Female")
            
            @totalfamily += countServedFamily(center.id, @disaster.id, false)
            @totalPersons += countIndivEvacuated(center.id, @disaster.id, false)
            @CumFamilies += countServedFamily(center.id, @disaster.id, false)
            @NowFamilies += countServedFamily(center.id, @disaster.id, true)
            @CumPerson +=countIndivEvacuated(center.id, @disaster.id, false)
            @NowPerson +=countIndivEvacuated(center.id, @disaster.id, true)
                
                

            GenRgAlloc.all.where("disaster_id = ? AND evac_id = ?", @disaster.id , center.id).each do |rg|               
                rlGoods.push([rg.name, "#{ReliefGood.find(rg.rg_id).unit } / #{ReliefGood.find(rg.rg_id).price }" , rg.price / ReliefGood.find(rg.rg_id).price, rg.price])  
                if ReliefGood.find(rg.rg_id).is_food == true
                    @tprice = @tprice + rg.price 
                elsif ReliefGood.find(rg.rg_id).is_food == false
                    @tprice = @tprice + rg.price 
                else
                    @tprice = @tprice + rg.price
                end
            end

            @yProf = EvacYearlyProfile.all.where(evac_id: center.id).where(year: @disaster.year).each do |yp|
                AssignedYearlyEss.all.where(evac_profile_id: yp.id).each do |ye|
                    essFaciTitles.push(EvacuationEssential.find(ye.ess_id).name);
                    #essFaci.push([EvacuationEssential.find(ye.ess_id).name,EvacuationEssential.find(ye.ess_id).ess_type, EvacuationEssential.find(ye.ess_id).description, ye.quantity, ye.status])
                end
            end
        end
        result = CSV.generate(encoding: "utf-8") do |csv|
            csv << ["Report Number"]
            csv << ["GENERATED AS OF", Time.current, "GENERATED BY", User.find(session[:user_id]).full_name, "EMAIL", User.find(session[:user_id]).email, "MOBILE No.", User.find(session[:user_id]).cnum]
            csv << ["INCIDENT NAME", @disaster.name, "DISASTER TYPE",@disaster.disaster_type,"DATE OF OCCURENCE", @disaster.date_of_occurence]
            csv << ["NOTED BY"]
            csv << [""]
            csv << ["","","","","","","","","","","","","","","","","","","","","","","","","","","","EVACUATION CENTER FACILITIES",""]
            csv << ["BARANGAY", "", "EVACUATION CENTER", "","FAMILIES","PERSONS","FAMILIES(CUM)","FAMILIES(NOW)", "PERSONS(CUM)","PERSONS(NOW)"].concat(age_group).concat(essFaciTitles)
            csv << ["GRAND TOTAL", barangay_group.length, "",EvacCenter.all.length, @totalfamily, @totalPersons, @CumFamilies, @NowFamilies, @CumPerson, @NowPerson, @infantM, @infantF, @toddlerM, @toddlerF,@preschoolersM,@preschoolersF,@schoolageM,@schoolageF,@teenageM,@teenageF,@adultM,@adultF,@seniorM,@seniorM, ]
            csv << [""]
            barangay_group.each do |brgy|
                csv << ["#{brgy}", "","", limiterForBarangay(brgy),]
                @evac_centers.each do |center|

                    if center.barangay == brgy
                        csv << ["", "", center.name, "1",
                        
                            countServedFamily(center.id, @disaster.id, false),
                            countIndivEvacuated(center.id, @disaster.id, false),
                            countServedFamily(center.id, @disaster.id, false),
                            countServedFamily(center.id, @disaster.id, true),
                            countIndivEvacuated(center.id, @disaster.id, false),
                            countIndivEvacuated(center.id, @disaster.id, true),
                            helpers.getInfants(center.id, @disaster.id, "Male"),
                            helpers.getInfants(center.id, @disaster.id, "Female"),
                            helpers.getToddlers(center.id, @disaster.id, "Male"),
                            helpers.getToddlers(center.id, @disaster.id, "Female"),
                            helpers.getPreschoolers(center.id, @disaster.id, "Male"),
                            helpers.getPreschoolers(center.id, @disaster.id, "Female"),
                            helpers.getSchoolagers(center.id, @disaster.id, "Male"),
                            helpers.getSchoolagers(center.id, @disaster.id, "Female"),
                            helpers.getTeenagers(center.id, @disaster.id, "Male"),
                            helpers.getTeenagers(center.id, @disaster.id, "Female"),
                            helpers.getAdults(center.id, @disaster.id, "Male"),
                            helpers.getAdults(center.id, @disaster.id, "Female"),
                            helpers.getSeniors(center.id, @disaster.id, "Male"),                         
                            helpers.getSeniors(center.id, @disaster.id, "Female"),
                            ""
                            
                    ].concat( getQuantity(center.id, @disaster))
                    end
                end
            end
            csv << [""]
            csv << ["RELIEF GOODS RECIEVED"]
            csv << [""]
            csv << ["NAME", "UNIT / PRICE", "QUANTITY", "CUMULATIVE PRICE"]
            rlGoods.each do |rlG|
                csv << rlG
            end
        end
        respond_to do |format|
            format.html {render result}
            format.xls {send_data result, filename: "#{@disaster.name}-#{@disaster.date_of_occurence}.xls", type: 'text/xls' }
            format.csv {send_data result, filename: "#{@disaster.name}-#{@disaster.date_of_occurence}.csv", type: 'text/csv' }
        end
    end
    private
    def limiterForBarangay(brgy)
        x = EvacCenter.where("BARANGAY = ?", brgy).all.length
        if(x > 0)
            return x 
        else 
            return "" 
        end 
    end
    def getQuantity(x, y)
        xyValues = []
        EvacYearlyProfile.all.where(evac_id: x).where(year: y.year).each do |yp|
            AssignedYearlyEss.all.where(evac_profile_id: yp.id).each do |ye|
                xyValues.push(ye.quantity)
            end
        end
        return xyValues
    end
    def countServedFamily(evac_center, disaster, key )
        
        countFam = 0
        if key 
            evacuee = Evacuee.all.where("evac_id = ?", evac_center).where(disaster_id: disaster).where(date_out: nil).group(:family_id)
        else
            evacuee = Evacuee.all.where("evac_id = ?", evac_center).where(disaster_id: disaster).group(:family_id)
        end
        
        evacuee.each do |x| 
            countFam = countFam + 1
        end   
        return countFam
    end
    def countIndivEvacuated(evac_center,disaster,key)
        evacuees = Evacuee.all.where(disaster_id: disaster).where(evac_id: evac_center)
        if key 
            member_ids = Array.new
            evacuees.each do |ec|
                EvacMember.all.where(evacuee_id: ec.id).where(status: "UNRELEASED").each do |em|
                       if !member_ids.include?(em.member_id)
                        member_ids.push(em.member_id)
                    end
                end
            end
            return member_ids.length
        else
            member_ids = Array.new
            evacuees.each do |ec|
                EvacMember.all.where(evacuee_id: ec.id).each do |em|
                       if !member_ids.include?(em.member_id)
                        member_ids.push(em.member_id)
                    end
                end
            end
            return member_ids.length
        end
    end
    def age_group 
        titles = ["INFANT(MALE)", "INFANT(FEMALE)", "TODDLERS(MALE)","TODDLERS(FEMALE)", "PRESCHOOLER(MALE)", "PRESCHOOLER(FEMALE)", "SCHOOLAGE(MALE)", "SCHOOLAGE(FEMALE)","TEENAGE(MALE)","TEENAGE(FEMALE)", "ADULT(MALE)", "ADULT(FEMALE)", "SENIOR CITIZEN(MALE)", "SENIOR CITIZEN(FEMALE)"]
    end
    def barangay_group
        titles = [
            "Abella", "Bagumbayan Norte", "Bagumbayan Sur", "Balatas", 
            "Calauag", "Cararayan", "Carolina", "Concepcion Grande", 
            "Concepcion Pequeña", "Dayangdang", "Del Rosario", "Dinaga", 
            "Igualdad Interior","Lerma","Liboton", "Mabolo", "Pacol", 
            "Panicuason", "Peñafrancia", "Sabang", "San Felipe", 
            "San Francisco", "San Isidro", "Santa Cruz", "Tabuco", 
            "Tinago", "Triangulo"
        ]
    end
end
